package zoom

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _scripts_delete_models_by_set_ids_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x53\xdd\x6a\xe3\x3c\x10\xbd\xb6\x9f\x62\xe0\xbb\x48\xcb\xd7\x9a\xb6\xb0\x37\x85\x2e\xf4\xc7\x94\xd0\xa6\x0b\x49\x77\x61\x59\x96\xa0\x58\x63\x47\x44\x96\x82\x46\x4e\x36\x6f\xbf\x33\x92\x93\xd2\xbd\x48\x6c\x79\xe6\xcc\x9c\x73\x66\x74\x79\x09\x8f\x7e\x7b\x08\xa6\x5b\x47\xb8\xb9\xba\xfe\x02\xf7\x16\xff\xc0\x43\xf0\x7b\x87\x15\xf0\xc9\x42\x0a\x12\x04\x24\x0c\x3b\xd4\x55\xc9\xa0\xef\x84\xe0\x5b\x88\x6b\x43\x40\x7e\x08\x0d\x42\xe3\x35\x02\x1f\x3b\xbf\xc3\xe0\x50\xc3\xea\xc0\x71\x84\xd9\xf4\x5d\x10\xd6\x34\xe8\x08\x2f\x60\xbf\x36\xcd\x1a\x1a\xe5\x60\x85\xd0\xfa\xc1\x69\x30\x2e\x65\xbe\x4e\x1f\xeb\xb7\x45\x0d\xad\xb1\x58\x95\x02\xd2\x68\x31\xe2\xb2\xe7\xd2\x96\x96\xab\xc3\x92\x30\x2e\x8d\x26\xe9\xa3\xc0\x0e\x0a\xa8\x09\x66\x1b\x19\xae\xf8\x4f\x6d\x90\x52\xa5\xd6\x5b\xeb\xf7\xc6\x75\xa0\x42\x37\xf4\xe8\x22\xdd\x4a\xbd\xe2\xfa\x1c\xde\x39\xbe\xc1\x83\xd0\x67\x38\x46\x79\x49\x0d\x80\x0b\x73\x52\x51\xdc\xe4\x24\xa7\x7a\xcc\x59\x01\x3b\x43\x11\x03\x8b\x4a\x99\x52\x4a\x32\x4e\xcd\xd1\x8d\x54\x99\x16\x3b\x26\x14\x32\x67\x76\x25\xb0\x71\x5b\xef\xb4\xb0\x89\x3e\xc5\x92\x82\xac\xb9\x33\x3b\x74\x52\x8f\x99\x54\x30\x8d\xdc\x2b\x0e\xc1\x65\x19\x6e\xe8\x57\x18\x4e\x04\x29\xcb\xdc\x33\x91\xb1\x9d\x4e\x10\xed\xb9\xaf\xf3\x71\xfc\x28\x50\xa9\x98\x4a\xa7\xba\xc9\xcb\x7b\x22\xd3\x39\x91\x4e\xc2\x63\xa7\x82\x51\x2b\xcb\xc8\xd6\x07\x40\x45\x07\x50\x4d\x83\x44\xa5\xf5\x8d\xb2\x82\x7b\x61\x97\xee\xe0\xa5\xfe\xb9\xf8\x75\xfd\x7b\xfc\x9c\x88\xbc\x89\x33\x77\x70\x3f\x7f\xfe\x21\x11\x2e\xfe\xcc\x3e\x1e\x95\x8b\xba\x36\xf8\x3e\x1d\xc4\x60\x31\x72\x84\x4b\xec\x8e\x35\x6a\x43\x15\x9f\xed\xd9\x64\x31\xab\x67\x0f\xf5\x7c\x31\xb9\x18\x5b\x9e\x8f\xa9\x0d\xaf\x46\xe4\xe4\xab\xd2\xb4\xf0\x9f\x00\xbf\xc2\x55\xf2\xba\x2c\xb8\xe3\x94\xe7\xa1\x58\xac\x6c\xdb\xb1\x6d\x59\x88\x16\x73\xc1\xef\xe2\xaf\xd9\x2a\x13\xe8\x8c\x03\xe7\xec\x51\x59\x08\xec\xe9\x64\x11\xf4\x8a\x73\xd6\x8a\xd6\xa3\x03\xbc\x95\x79\xba\x45\x91\x19\x6c\x92\xfe\x0f\xc5\x55\x05\x93\xdb\x89\x3c\x8c\xe6\xa4\x23\xc1\xfc\xfc\xff\x93\xaa\xa7\xfa\x95\x05\x6d\x44\x4d\x6a\x3b\xc7\x9e\x89\x7e\x2c\x86\x30\xfc\xe4\x91\xec\x99\xcd\x2b\x98\x00\x6f\xdf\xde\xeb\xdb\x7c\xbf\x4c\x1e\xae\x43\x99\x0e\x4f\xcd\xe6\x7b\x45\x42\x49\xa5\x45\xc9\x10\x2e\x93\x68\xee\x31\xaf\x48\x5e\xad\xa3\x98\xd3\x3c\xff\xd1\xc3\x5d\x27\x9c\xf4\x69\x24\xf3\x7a\x76\x1a\x87\x98\xc9\x22\xd0\xe9\x52\x7e\x79\x3d\xb3\xe6\xbf\x01\x00\x00\xff\xff\x73\xcb\x7a\x65\x3d\x04\x00\x00")

func scripts_delete_models_by_set_ids_lua_bytes() ([]byte, error) {
	return bindata_read(
		_scripts_delete_models_by_set_ids_lua,
		"scripts/delete_models_by_set_ids.lua",
	)
}

func scripts_delete_models_by_set_ids_lua() (*asset, error) {
	bytes, err := scripts_delete_models_by_set_ids_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "scripts/delete_models_by_set_ids.lua", size: 1085, mode: os.FileMode(436), modTime: time.Unix(1431540052, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scripts_delete_string_index_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x92\x4d\x6f\xda\x4e\x10\xc6\xcf\xf6\xa7\x18\x71\x4a\x22\xc7\xff\xbc\xe8\x7f\x89\x94\x43\x1a\x21\x8a\x5a\xa8\x44\x69\x0e\x6d\xa3\x68\xf1\x8e\xed\x15\xeb\x5d\xb4\x63\x43\x7c\xe9\x67\xef\xec\x2e\x18\xa8\xda\x0b\xc8\x9e\x97\xe7\xf7\x3c\xe3\xeb\x6b\x78\xb6\x9b\xde\xa9\xaa\x6e\xe1\xee\xe6\xf6\x7f\x78\xd2\xf8\x0e\x1f\x9c\xdd\x19\xcc\x81\x9f\x34\x84\x22\x81\x43\x42\xb7\x45\x99\xa7\x3c\xf4\x8d\x10\x6c\x09\x6d\xad\x08\xc8\x76\xae\x40\x28\xac\x44\xe0\xc7\xca\x6e\xd1\x19\x94\xb0\xea\xb9\x8e\x30\x9b\x2e\xfd\x84\x56\x05\x1a\xc2\x0c\x76\xb5\x2a\x6a\x28\x84\x81\x15\x42\x69\x3b\x23\x41\x99\xd0\xf9\x79\xfa\x3c\x9e\x7f\x1d\x43\xa9\x34\xe6\xa9\x1f\x92\xa8\xb1\xc5\x37\x6a\x9d\x32\xd5\x9b\x32\x92\xd9\x58\x42\x80\xee\x04\x50\xe1\xd4\xa6\xe5\x49\xc1\x3f\x62\x8d\x14\x96\x94\x56\x6b\xbb\xe3\x76\x10\xae\xea\x1a\x34\x2d\x3d\xf8\x55\xc9\xed\x25\x2c\xb9\x6e\x44\x13\xd0\x05\x1b\xaa\x14\xb5\xe8\x18\xb5\x61\x76\xcd\x5d\x49\x72\x17\xbb\x94\x8c\xf6\x30\x96\xa0\xb5\x9e\x36\xe2\x48\x28\x9d\x6d\x42\x31\x10\x85\xb9\xfb\xf3\xed\x43\x91\xbb\x23\x3d\xbb\x42\x2d\x3d\x89\xef\x1b\xd8\xd1\x40\x51\x63\xb1\x26\x50\x61\xca\x61\x34\xb8\x15\xba\xf3\x66\x5c\x58\x55\xa9\x2d\x37\x86\x0d\x51\x82\x5a\xeb\xb9\x63\x70\x7e\x69\xc4\xac\x05\xd5\x19\x08\x1f\xe9\x71\x5b\xc6\x4e\x1b\x3e\x0a\x9d\xf8\x39\x77\x00\xd6\xfc\x29\x13\xae\x3c\xff\xb2\x1c\x3f\x30\xaf\x3f\x72\x04\xbe\x6a\x3a\x6a\xaf\x7c\x16\x85\xd0\xda\x1f\x19\x99\x11\xe3\x66\xc1\x38\x9e\x60\xc0\x8e\x5a\x3c\xdd\x6d\xa4\xe0\xe0\xfe\xdb\x07\x18\x8f\xfb\x44\xa4\x2a\x03\x6b\xec\xc9\xe7\xbb\x15\x4e\x89\x95\x66\x4c\x3f\x8e\x82\x7a\x10\x45\x81\x44\xa9\xb6\x2c\x16\x97\xcd\xbd\xf9\x47\x78\x5a\x4c\x5e\x7e\xdc\xbe\x9e\x56\xa6\xf2\xf0\xfe\xee\xf0\x3e\x18\x39\x9d\xb8\x7f\xf5\xba\x13\x0c\xc1\x83\xe5\x30\xf7\x31\x1f\xd2\xc0\x77\xfe\x22\xfc\xb1\x8e\x71\xc2\x05\x47\x29\x4c\x7f\x79\x2a\xf6\x09\x7b\xde\x79\x24\xca\x73\x18\x3d\x8c\xfc\xdf\x9e\x65\xdf\xcc\x12\x2f\x41\xe1\x91\x6f\x20\x15\xe5\x3e\xb5\x8b\xd1\xc7\xc9\x78\x39\xca\x86\x55\xd9\x91\xf4\xa0\x12\xce\xf2\x6f\x95\xa1\x3f\x65\xb8\x41\xe4\xd7\x23\x94\x42\x53\xb8\x86\x49\x13\xb6\xba\x08\x87\xff\xdb\xdd\xe3\xb7\x14\xbf\xdf\x64\x80\x9d\x61\xb3\x42\xc7\xa2\xc3\x4e\xaf\xf9\xf3\xe6\xcc\x5a\x72\x6a\xe5\xfb\x62\x3c\x63\x2b\x07\xde\xec\xb8\xe5\x32\x45\x23\x7f\x07\x00\x00\xff\xff\x42\x19\x1d\x41\x60\x04\x00\x00")

func scripts_delete_string_index_lua_bytes() ([]byte, error) {
	return bindata_read(
		_scripts_delete_string_index_lua,
		"scripts/delete_string_index.lua",
	)
}

func scripts_delete_string_index_lua() (*asset, error) {
	bytes, err := scripts_delete_string_index_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "scripts/delete_string_index.lua", size: 1120, mode: os.FileMode(436), modTime: time.Unix(1431540052, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scripts_extract_ids_from_field_index_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x93\xcf\x4e\x5b\x3d\x10\xc5\xd7\xc9\x53\xcc\x8e\x44\xdf\x25\xfa\xa0\xed\x06\x89\x45\x80\x08\x45\xb4\x54\x02\x5a\x89\x56\x55\xe4\x5c\x4f\x12\x17\xc7\x4e\x3d\xbe\xf9\xf3\xf6\x3d\xe3\xdc\x40\x61\x51\x75\x13\xe5\xda\x73\x8e\x8f\x7f\x33\x3e\x3e\xa6\xcb\xb8\xda\x25\x37\x5f\x64\x3a\xfd\xff\xe4\x03\x0d\x3d\x6f\xe9\x22\xc5\x4d\xe0\x01\xe1\xcb\x53\xd9\x14\x4a\x2c\x9c\xd6\x6c\x07\x5d\x88\xbe\x08\x53\x9c\x51\x5e\x38\x21\x89\x4d\xaa\x99\xea\x68\x99\xf0\x39\x8f\x6b\x4e\x81\x2d\x4d\x77\xd8\x67\xfa\x34\x7e\x50\x85\x77\x35\x07\xe1\x8a\x36\x0b\x57\x2f\xa8\x36\x81\xa6\x4c\xb3\xd8\x04\x4b\x2e\x94\xca\x8f\xe3\xcb\xd1\xed\xfd\x88\x66\xce\xf3\xa0\xab\x22\xde\xd6\x39\x99\x3a\x4f\x9c\x95\xc9\x2c\xc5\xe5\x64\xe6\xd8\xdb\x89\x0b\x16\x29\x71\x98\x21\xdf\x18\x92\x3a\xb9\x55\x86\x87\xc1\x8f\x79\x62\x29\x76\xb3\xe8\x7d\xdc\xb8\x30\x27\x93\xe6\xcd\x92\x43\x96\x33\x35\xed\x9c\xf4\x49\x38\xdf\xf0\xee\x8c\x1e\x50\xf7\xc4\x3b\xbd\x0b\x6c\x62\xca\xc8\x8d\x3d\x68\x13\x16\xca\x61\xb4\x3f\xac\xc7\x0e\xa6\x89\x02\x9c\x92\xab\x09\x05\xd3\x18\x7d\xbf\x38\x9e\xf6\xc9\xb2\xfc\xdd\x72\x03\x35\x97\x60\x20\xd9\xf8\xac\xc1\x70\x2d\xda\x38\x30\x06\x0a\xc9\x31\xb1\x85\x5d\xa7\xf3\xae\x4f\x4b\x17\xf6\x56\xf8\xf3\x9c\xbf\xc4\x52\x87\x6f\x77\xc3\xdb\xeb\xd1\xc5\xe3\xfd\xe5\xe7\xbb\x11\xc8\x2f\x97\x26\xd8\x92\xe4\x3d\xa4\x66\xbb\x97\x32\xd0\xfe\xbb\x54\x15\xcf\x20\x39\xa0\x43\xde\xcb\x9b\xf2\x18\x5a\x72\x48\x9d\x17\xc5\x6f\xee\xd6\x28\x2e\x29\x71\x1c\xce\x7e\xa1\x5d\xa9\xad\xae\x16\xbf\x72\x3f\x79\x03\x40\xc1\x40\xda\xc2\x1b\xd0\x38\x93\x8d\xa8\x0a\x31\xd3\xaa\x9d\xb8\x22\xe1\xad\x13\x55\xa8\xa5\xd4\xea\x54\x15\x6b\x17\x24\xb3\xb1\xf4\xb3\x91\x0c\xdf\x95\x37\x35\xe4\xfb\x8a\x7d\x48\xe1\x5f\x0d\xd2\x38\xe3\xb5\x77\x53\x4e\xc8\x10\xd1\x21\x5e\x15\xe3\x25\x97\x35\xf5\x6d\xc7\x50\xcc\x12\xc3\x9d\x2c\xa7\xfd\x10\x0e\x45\xdc\x3c\x68\x4f\x8b\x72\x6d\x92\x33\x53\x0f\x7b\x45\xca\x46\x76\x64\x6a\x1c\x2a\x5d\x1f\xc1\xec\x00\xe8\x9c\x6e\x46\x8f\xf7\xdf\x4f\x7e\xb4\xcb\xed\x15\x0f\xeb\xa7\x87\x75\x25\x77\x4e\xc3\xbb\xeb\xaf\x2f\xb5\x4a\xb1\x5d\x43\x1d\x22\x5c\x03\x13\xda\xf1\x67\x60\xea\xad\x8d\x6f\xf8\x3f\x67\x69\x65\x5c\x92\x3e\xe9\xfb\xd8\x5f\xe0\x79\xe8\x0e\x7e\xad\xe4\x1c\x84\xac\x93\x81\xb6\xb6\x77\xf4\xaa\xb5\x47\x55\x1b\xbc\xd2\x44\x95\x46\x28\xa3\x3d\xce\x9c\x4c\x06\x0f\x3c\xea\x57\xc7\x2b\x7c\x63\x2d\x00\xe0\x35\x03\x8b\xee\xb5\x77\xec\x2a\x18\x57\xb5\xa5\x8a\xd5\x95\x88\xbd\x56\x8b\xc7\x12\xbb\x9d\x57\x51\x86\x57\x57\x48\xd0\xea\xab\x17\x71\xbf\x8b\x21\xee\xfe\x0e\x00\x00\xff\xff\x69\x72\x2c\x72\xa6\x04\x00\x00")

func scripts_extract_ids_from_field_index_lua_bytes() ([]byte, error) {
	return bindata_read(
		_scripts_extract_ids_from_field_index_lua,
		"scripts/extract_ids_from_field_index.lua",
	)
}

func scripts_extract_ids_from_field_index_lua() (*asset, error) {
	bytes, err := scripts_extract_ids_from_field_index_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "scripts/extract_ids_from_field_index.lua", size: 1190, mode: os.FileMode(436), modTime: time.Unix(1431540052, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scripts_extract_ids_from_string_index_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\x5d\x4f\xdb\x4a\x10\x7d\x8e\x7f\xc5\x48\xf7\xa2\x90\x8b\x89\x08\xb7\x7d\x41\xa2\x52\x80\x14\x45\xa4\x3c\x10\xa8\x4a\x11\x8d\x36\xde\x71\xbc\xc2\xde\xb5\x76\xd7\x09\xe1\xd7\x77\x66\xd7\x4e\xe0\xa5\xea\x03\x1f\x99\x9d\x73\xe6\xcc\x9c\x99\x1c\x1f\xc3\xa5\xa9\xb7\x56\xad\x0a\x0f\xa7\x27\xa3\xcf\x30\x2e\xf1\x15\x2e\xac\xd9\x68\x1c\x02\x7d\x2a\x21\x3c\x3a\xb0\xe8\xd0\xae\x51\x0e\x13\x02\x3d\x38\x04\x93\x83\x2f\x94\x03\x67\x1a\x9b\x21\x64\x46\x22\xd0\xc7\x95\x59\xa3\xd5\x28\x61\xb9\xa5\x77\x84\x6f\xd3\x7b\x46\x94\x2a\x43\xed\x30\x85\x4d\xa1\xb2\x02\x32\xa1\x61\x89\x90\x9b\x46\x4b\x50\x3a\x64\xce\xa6\x97\x93\xdb\xf9\x04\x72\x55\xe2\x30\x61\x10\xbe\x66\xde\x8a\xcc\x2f\x94\x74\x8b\xdc\x9a\x6a\xe1\xbc\x55\x7a\xb5\x50\x5a\x92\x4c\xaa\x26\xa0\x6c\x04\xb8\xcc\xaa\xda\x13\x89\xa0\x5f\xe2\x05\x5d\xe0\xcb\x4d\x59\x9a\x0d\xa5\x83\xb0\xab\xa6\x42\xed\xdd\x19\xb3\xf6\x46\x03\x70\xe8\x6f\x70\x7b\x06\xf7\x94\xf7\x82\x5b\x6e\x86\x68\x8c\xf5\x24\x9c\xde\x08\x6b\x39\x10\xaa\x41\xa8\xc6\xca\xd1\x22\xa0\x20\xf9\x15\x56\x4b\xb4\x2c\x20\x4c\x01\x89\xb6\xd7\xeb\x11\xa8\x3a\x83\xb5\x28\x1b\x84\x23\xb8\x7d\x98\xcd\xe8\x8f\x92\x1d\x32\x04\x54\xd4\x36\x9e\x5f\x4e\xa7\x31\x92\x15\x82\x7b\x24\xba\x38\x9a\x42\x70\x5b\x3c\xce\xda\x28\xed\x23\x75\x24\xa5\x62\x27\xc3\x10\x38\x1d\x80\x44\xf7\xe7\x1e\x62\x55\xae\x46\xde\x35\xa5\x0f\xad\x48\x07\x1b\x45\xae\xd2\xf0\x9d\x37\x16\x65\x98\xc8\xff\x03\xa8\x94\x8e\x54\xf4\xcf\x6e\x60\x61\x0e\xcc\xf0\xf3\x6e\x7c\x7b\x3d\xb9\x78\x9c\x4d\x7e\x90\xb4\xaa\x12\x3a\x02\x3f\x11\x50\xbc\x46\x20\x92\x95\x7f\x0b\xe4\xfc\x9d\x6b\xa8\xc9\xe9\x60\x74\x1c\x0e\x8b\x64\xb7\x5b\x97\xa0\x71\x2c\x9d\x5f\x56\x6a\x4d\xc9\x41\x21\x15\xa3\xca\x7b\x6b\x53\xa6\xe5\x68\xe0\x0b\xbd\x05\xb6\xaa\x1b\x14\xf5\xed\x8b\xc0\x22\xea\xda\x9a\xda\x2a\xe1\x59\x44\x48\x64\x46\x47\x1b\x2a\xb9\x92\xb1\x12\x6d\xdc\xc0\xb1\x73\x6a\xa5\x79\xbc\x44\x66\xc8\x5b\x42\x2d\x4b\x02\x70\x7f\x28\xdc\x16\x44\x96\xa1\x73\x49\x69\x32\x51\x76\x82\xcf\xe1\x66\xf2\x38\x7f\x1a\x3d\xb7\xe1\x4e\x41\x1b\x3f\xed\xe2\xdc\xc8\x39\x8c\xef\xae\xbf\xef\x73\xb9\xa9\x36\x46\x79\x24\xe1\x9a\xac\x14\xe4\x18\x2b\x8f\x7b\xe7\xe0\x30\xec\xc3\x91\x92\x50\x0b\x65\xdd\x20\x8e\x8b\x33\xf6\xfe\x77\x7c\x2d\xe4\x9c\xb6\x40\x2a\x37\xa4\x58\x79\xd8\x7f\x67\x4b\x3f\x6d\x65\xa7\xac\x27\x65\x01\x83\x44\xe5\xf0\x4f\x87\xfc\x02\x27\x61\xa8\x49\x8f\xd4\x4c\x69\x51\x79\x6e\x7c\xe5\x1f\x24\xf1\xe8\x5b\x17\x3b\x13\x13\xbe\x08\x50\xe9\xee\x5c\x34\xa8\xa0\xf7\xb0\x05\xd1\x12\x9b\xa4\xd7\x6b\xf7\x81\xba\xa1\xeb\x40\x22\xde\xd2\x17\x0b\x9f\x6d\xee\xdb\x22\xa5\x70\x1e\x5c\x2d\x32\x8c\xe9\x5f\x55\x34\x3a\x9e\x66\x7b\x84\x1f\xb3\x62\xf7\x4a\xce\xbd\xb0\x9e\xba\x8f\xb7\x3c\xcc\x09\xd1\x96\x4f\xa1\x7f\xf0\xf6\xf4\xeb\xe0\xed\xf9\xbf\x7f\xfb\x83\x77\x90\x7d\xb6\x6b\x96\xbb\xe4\x96\xea\x68\xc4\xa9\x1f\x66\x39\xbe\xba\xa2\x21\xb6\x26\xa7\xdc\xb0\x92\x94\x44\xdb\x94\xd0\xcf\xef\x00\x00\x00\xff\xff\x42\xb7\x93\x23\x64\x05\x00\x00")

func scripts_extract_ids_from_string_index_lua_bytes() ([]byte, error) {
	return bindata_read(
		_scripts_extract_ids_from_string_index_lua,
		"scripts/extract_ids_from_string_index.lua",
	)
}

func scripts_extract_ids_from_string_index_lua() (*asset, error) {
	bytes, err := scripts_extract_ids_from_string_index_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "scripts/extract_ids_from_string_index.lua", size: 1380, mode: os.FileMode(436), modTime: time.Unix(1431540052, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/delete_models_by_set_ids.lua":      scripts_delete_models_by_set_ids_lua,
	"scripts/delete_string_index.lua":           scripts_delete_string_index_lua,
	"scripts/extract_ids_from_field_index.lua":  scripts_extract_ids_from_field_index_lua,
	"scripts/extract_ids_from_string_index.lua": scripts_extract_ids_from_string_index_lua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"scripts": &_bintree_t{nil, map[string]*_bintree_t{
		"delete_models_by_set_ids.lua":      &_bintree_t{scripts_delete_models_by_set_ids_lua, map[string]*_bintree_t{}},
		"delete_string_index.lua":           &_bintree_t{scripts_delete_string_index_lua, map[string]*_bintree_t{}},
		"extract_ids_from_field_index.lua":  &_bintree_t{scripts_extract_ids_from_field_index_lua, map[string]*_bintree_t{}},
		"extract_ids_from_string_index.lua": &_bintree_t{scripts_extract_ids_from_string_index_lua, map[string]*_bintree_t{}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
